// Add direction modifiers
@mixin directioner($label, $property, $value, $increments, $negatives, $breakpoints, $dives, $states) {
    $directions: top, right, bottom, left;

    @each $direction in $directions {
        $newLabel: #{$label + firstChar($direction)};
        $newProp: #{$property}-#{$direction};

        .#{$newLabel} {
            #{$newProp}: $value !important;
        }
        
        @if $negatives {
            .-#{$newLabel} {
                #{$newProp}: -$value !important;
            }
        }

        @if $increments != false {
            @include incrementer($increments, $negatives, $newLabel, $newProp, $value, $breakpoints, $dives, $states);
        }
        
        @if $states != false {
            @include stater($states, $newLabel, $newProp, $value);

            @if $negatives {
                @include stater($states, -#{$newLabel}, $newProp, -#{$value});
            }
        }

        @if $breakpoints != false {
            @include breakpointer($newLabel, $newProp, $value, $dives, $states);

            @if $negatives {
                @include breakpointer(-$newLabel, $newProp, -$value, $dives, $states);
            }
        }
        
        @if $dives != false {
            @include diver($newLabel, $newProp, $value);

            @if $negatives {
                @include diver(-#{$newLabel}, $newProp, -$value);
            }
        }
    }
}

// Add multiplication modifiers in increments
@mixin incrementer($increments, $negatives, $label, $property, $value, $breakpoints, $dives, $states) {
    // -0 modifier
    $zeroLabel: #{$label}-0;

    .#{$zeroLabel} {
        #{$property}: 0 !important;
    }

    @if $breakpoints != false {
        @include breakpointer($zeroLabel, $property, 0, $dives, $states);
    }
    
    @if $states != false {
        @include stater($states, $zeroLabel, $property, 0);
    }

    @if $dives != false {
        @include diver($zeroLabel, $property, 0);
    }

    // Increment Types
    @if type-of($increments) == map {
        $factor: false;
        $max: false;
        $min: false;

        @each $incrementProperty, $incrementValue in $increments {
            @if $incrementProperty == factor {
                $factor: $incrementValue;
            } @else if $incrementProperty == max {
                $max: $incrementValue;
            } @else if $incrementProperty == min {
                $min: $incrementValue;
            }
        }

        $iterableFactor: $min;

        @while $iterableFactor <= $max {
            $newVal: $value * $iterableFactor;
            $newLabel: '';

            @if $iterableFactor != 1 and $iterableFactor != 0 and $iterableFactor != -1 {
                @if $negatives and $iterableFactor < 0 {
                    @if isDecimal($iterableFactor) {
                        $newLabel: -#{$label}-#{secondChar($iterableFactor)}\.#{sliceEnd($iterableFactor, 4)};
                    } @else {
                        $newLabel: -#{$label + $iterableFactor};
                    }
                } @else if $iterableFactor > 0 {
                    @if isDecimal($iterableFactor) {
                        $newLabel: #{$label}-#{firstChar($iterableFactor)}\.#{sliceEnd($iterableFactor, 3)};
                    } @else {
                        $newLabel: #{$label}-#{$iterableFactor};
                    }
                }
                
                @if $newLabel != "" {
                    .#{$newLabel} {
                        #{$property}: $newVal !important;
                    }
                }

                @if $states != false {
                    @include stater($states, $newLabel, $property, $value);
                }
    
                @if $breakpoints != false {
                    @include breakpointer($newLabel, $property, $newVal, $dives, $states);
                }
    
                @if $dives != false {
                    @include diver($newLabel, $property, $newVal);
                }
            }

            $iterableFactor: $iterableFactor + $factor;
        }
    } @else if type-of($increments) == list {
        @each $increment in $increments {
            $newLabel: '';
            $newVal: $value * $increment;

            @if $increment != 1 and $increment != 0 and $increment != -1 {
                @if $negatives and $increment < 0 {
                    @if isDecimal($increment) {
                        $newLabel: -#{$label}-#{secondChar($increment)}\.#{sliceEnd($increment, 4)} !important;
                    } @else {
                        $newLabel: -#{$label + $increment} !important;
                    }
                } @else {
                    @if isDecimal($increment) {
                        $newLabel: #{$label}-#{firstChar($increment)}\.#{sliceEnd($increment, 3)} !important;
                    } @else {
                        $newLabel: #{$label}-#{$increment} !important;
                    }
                }
            }

            .#{$newLabel} {
                #{$property}: $newVal !important;
            }

            @if $states != false {
                @include stater($states, $newLabel, $property, $newVal);
            }

            @if $breakpoints {
                @include breakpointer($newLabel, $property, $newVal, $dives, $states);
            }

            @if $dives {
                @include diver($newLabel, $property, $newVal);
            }
        }
    } @else if $increments {
        $iterator: '';

        @if $negatives {
            $iterator: -6;
        } @else {
            $iterator: 0.5;
        }

        @while $iterator <= 6 {
            $newLabel: $label;
            $newVal: $value * $iterator;

            @if $negatives and $iterator < 0 and $iterator != -1 {
                @if isDecimal($iterator) {
                    $newLabel: -#{$label}-#{secondChar($iterator)}\.5 !important;
                } @else {
                    $newLabel: -#{$label + $iterator} !important;
                }
            } @else if $iterator > 0 and $iterator != 1 {
                @if isDecimal($iterator) {
                    $newLabel: #{$label}-#{firstChar($iterator)}\.5 !important;
                } @else {
                    $newLabel: #{$label}-#{$iterator} !important;
                }
            }

            @if $iterator != 0 and $iterator != -1 and $iterator != 1 {
                .#{$newLabel} {
                    #{$property}: $newVal !important;
                }

                @if $states != false {
                    @include stater($states, $newLabel, $property, $newVal);
                }
    
                @if $breakpoints == true {
                    @include breakpointer($newLabel, $property, $newVal, $dives, $states);
                }
                
                @if $dives == true {
                    @include diver($newLabel, $property, $newVal);
                }
            }

            $iterator: $iterator + 0.5;
        }
    }
}

// Generate state classes
@mixin stater($states, $label, $property, $value) {
    @each $state in $states {
        .#{$state}\:#{$label}:#{$state} {
            #{$property}: $value !important;
        }
    }
}

// Create breakpoints
@mixin breakpointer($label, $property, $value, $dives, $states) {
    $utilityBreakpoints: (
        sm: 576px,
        md: 768px,
        lg: 1200px
    ) !default;

    $utilityBreakpointParadigm: min-width !default;

    @if variable-exists(extraBreakpoints) {
        $utilityBreakpoints: join($utilityBreakpoints, $extraBreakpoints);
    }

    @each $breakpointLabel, $breakpointValue in $utilityBreakpoints {
        $newLabel: #{$breakpointLabel}\:#{$label};

        .#{$newLabel} {
            @media (#{$utilityBreakpointParadigm}: $breakpointValue) {
                #{$property}: $value !important;
            }
        }

        // Because of wildcard, diver can't pass label to breakpointer mixin
        @if $dives == true {
            .#{$newLabel}-dive > * {
                @media (#{$utilityBreakpointParadigm}: $breakpointValue) {
                    #{$property}: $value !important;
                }
            }

            @if $states != false {
                @each $state in $states {
                    @media (#{$utilityBreakpointParadigm}: $breakpointValue) {
                        .#{$breakpointLabel}\:#{$state}\:#{$label}-dive > *:#{$state} {
                            #{$property}: $value !important;
                        }
                    }
                }
            }
        }

        @if $states != false {
            @each $state in $states {
                @media (#{$utilityBreakpointParadigm}: $breakpointValue) {
                    .#{$breakpointLabel}\:#{$state}\:#{$label}:#{$state} {
                        #{$property}: $value !important;
                    }
                }
            }
        }
    }
}

// Add class styling to children
@mixin diver($label, $property, $value) {
    .#{$label}-dive > * {
        #{$property}: $value !important;
    }
}