@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
@use '../../../_globals.scss';
@use '../../../helpers/_helpers.scss' as *;

@mixin increment-list($selector, $settings) {
    $styles: map.get($settings, styles);
    $increments: map.get($settings, increments);
    $incrementables: ();

    // Set incrementable properties
    @each $key, $value in $styles {
        @if meta.type-of($value) == number {
            $incrementables: list.join($incrementables, ($key: $value));
        }
    }

    @each $increment in $increments {
        $prefix: '';
        $suffix: '';

        $newStyles: ();

        @each $property, $incrementable in $incrementables {
            $tempValue: $incrementable * $increment;
            $subSuffix: '#{$increment}';

            // Generate selector string format
            @if $increment < 0 {
                $prefix: '-';

                @if string.index($subSuffix, '.') != null {
                    $suffixStart: string.slice($subSuffix, 1, string.index($subSuffix, '.') - 1);
                    $suffixEnd: string.slice($subSuffix, string.index($subSuffix, '.') + 1, string.length($subSuffix));

                    $suffix: $suffixStart + \. + $suffixEnd;
                } @else {
                    $suffix: $subSuffix;
                }
            } @else {
                @if string.index($subSuffix, '.') != null {
                    $suffixStart: string.slice($subSuffix, 1, string.index($subSuffix, '.') - 1);
                    $suffixEnd: string.slice($subSuffix, string.index($subSuffix, '.') + 1, string.length($subSuffix));

                    $suffix: '-' + $suffixStart + \. + $suffixEnd;
                } @else {
                    $suffix: '-#{$subSuffix}';
                }
            }

            $newStyles: map.set($newStyles, $property, $tempValue);
        }

        @each $property, $value in $styles {
            @if map.get($newStyles, $property) == null {
                $newStyles: map.set($newStyles, $property, $value);
            }
        }

        #{su-selector-combine($prefix, $suffix, $selector)} {
            @each $property, $value in $newStyles {
                #{$property}: $value !important;
            }
        }
    
        $formattedSelector: su-selector-declassify(su-selector-combine($prefix, $suffix, $selector));
    }
}
