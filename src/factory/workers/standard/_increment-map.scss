@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
@use '../../../_globals.scss';
@use '../../../helpers/_helpers.scss' as *;

@mixin increment-map($selector, $settings) {
    $styles: map.get($settings, styles);
    $incrementConfig: map.get($settings, increments);
    $properties: map.get($incrementConfig, properties);

    $factor: map.get($incrementConfig, factor);
    $max: map.get($incrementConfig, max);
    $min: map.get($incrementConfig, min);

    $incrementables: ();

    // Check required settings are valid
    @each $key, $value in (factor: $factor, max: $max, min: $min) {
        @if $value == null {
            @error 'Sass Utilizer: Error in increment worker for \'#{$selector}\' utility: \'#{$key}\' is undefined';
        }
    }

    // If no specific properties to increment are defined, set all properties with unit types to be incremented
    @if $properties == null {
        @each $key, $value in $styles {
            @if meta.type-of($value) == number {
                $incrementables: list.join($incrementables, ($key: $value));
            }
        }
    } @else {
        @each $propertyKey, $propertyValue in $properties {
            @each $key, $value in $styles {
                @if $propertyKey == $key and meta.type-of($value) == number {
                    $incrementables: list.join($incrementables, ($key: $value));
                }
            }
        }
    }
    
    $iterableFactor: $min;

    @while $iterableFactor <= $max {
        $prefix: '';
        $suffix: '';
        
        $newStyles: ();
        $subSuffix: '#{su-string-remove-unit($iterableFactor)}';

        @each $property, $incrementable in $incrementables {
            @each $key, $value in $incrementable {
                $tempValue: $incrementable * $iterableFactor;
                $subSuffix: '#{su-string-remove-unit($iterableFactor)}';

                // Generate selector string format
                @if $iterableFactor != 1 {
                    @if $iterableFactor < 0 {
                        $prefix: '-';

                        @if string.index($subSuffix, '.') != null {
                            $suffixStart: string.slice($subSuffix, 1, string.index($subSuffix, '.') - 1);
                            $suffixEnd: string.slice($subSuffix, string.index($subSuffix, '.') + 1, string.length($subSuffix));

                            $suffix: $suffixStart + \. + $suffixEnd;
                        } @else {
                            $suffix: $subSuffix;
                        }
                    } @else {
                        @if string.index($subSuffix, '.') != null {
                            $suffixStart: string.slice($subSuffix, 1, string.index($subSuffix, '.') - 1);
                            $suffixEnd: string.slice($subSuffix, string.index($subSuffix, '.') + 1, string.length($subSuffix));

                            $suffix: '-' + $suffixStart + \. + $suffixEnd;
                        } @else {
                            $suffix: '-#{$subSuffix}';
                        }
                    }
                }
                
                $newStyles: map.set($newStyles, $property, $tempValue);
            }
        }

        @each $property, $value in $styles {
            @if map.get($newStyles, $property) == null {
                $newStyles: map.set($newStyles, $property, $value);
            }
        }

        #{su-selector-combine($prefix, $suffix, $selector)} {
            @each $property, $value in $newStyles {
                #{$property}: $value !important;
            }
        }
    
        $formattedSelector: su-selector-declassify(su-selector-combine($prefix, $suffix, $selector));

        $iterableFactor: $iterableFactor + $factor;
    }
}
