@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
@use '../../../_globals.scss';
@use '../../../helpers/_helpers.scss' as *;

@mixin increment-map() {
    $utility: globals.get(currentUtility);
    $selector: map.get($utility, selector);
    $styles: map.get($utility, settings, styles);
    $increment: map.get($utility, settings, increments);
    $properties: map.get($increment, properties);

    $factor: map.get($increment, factor);
    $max: map.get($increment, max);
    $min: map.get($increment, min);

    $newSelectors: ();
    $newValues: ();
    $incrementables: ();

    // Check required settings are valid
    @each $key, $value in (factor: $factor, max: $max, min: $min) {
        @if $value == null {
            @error 'Sass Utilizer: Error in increment worker for \'#{$selector}\' utility: \'#{$key}\' is undefined';
        }
    }

    // Set properties that are incremented (all properties with unit types if $properties isn't passed in)
    @if $properties == null {
        @each $key, $value in $styles {
            @if meta.type-of($value) == number {
                $incrementables: list.join($incrementables, ($key: $value));
                $newValues: map.set($newValues, $key, ());
            }
        }
    } @else {
        @each $propertyKey, $propertyValue in $properties {
            @each $key, $value in $styles {
                @if $propertyKey == $key and meta.type-of($value) == number {
                    $incrementables: list.join($incrementables, ($key: $value));
                    $newValues: map.set($newValues, $key, ());
                }
            }
        }
    }

    @each $property, $incrementable in $incrementables {
        @each $key, $value in $incrementable {
            @each $property, $value in $incrementables {
                $iterableFactor: $min;
        
                @while $iterableFactor <= $max {
                    $prefix: '';
                    $suffix: '';
                    $tempValue: $value * $iterableFactor;
                    $tempSuffix: '#{su-string-remove-unit($iterableFactor)}';
        
                    // Generate selector string format
                    @if $iterableFactor != 1 and $iterableFactor != 0 {
                        @if $iterableFactor < 0 {
                            $prefix: '-';

                            @if string.index($tempSuffix, '.') != null {
                                $suffixStart: string.slice($tempSuffix, 1, string.index($tempSuffix, '.') - 1);
                                $suffixEnd: string.slice($tempSuffix, string.index($tempSuffix, '.') + 1, string.length($tempSuffix));

                                $suffix: $suffixStart + \. + $suffixEnd;
                            } @else {
                                $suffix: $tempSuffix;
                            }
                        } @else {
                            @if string.index($tempSuffix, '.') != null {
                                $suffixStart: string.slice($tempSuffix, 1, string.index($tempSuffix, '.') - 1);
                                $suffixEnd: string.slice($tempSuffix, string.index($tempSuffix, '.') + 1, string.length($tempSuffix));

                                $suffix: '-' + $suffixStart + \. + $suffixEnd;
                            } @else {
                                $suffix: '-#{$tempSuffix}';
                            }
                        }

                        // Append to tempSelector to new selectors
                        @if list.index($newSelectors, su-selector-combine($prefix, $suffix, $selector)) == null {
                            $newSelectors: list.append($newSelectors, su-selector-combine($prefix, $suffix, $selector));
                        }

                        @if list.index(map.get($newValues, $property), $tempValue) == null {
                            $newValues: map.set($newValues, $property, list.append(map.get($newValues, $property), $tempValue, $separator: comma));
                        }
                    }

                    $iterableFactor: $iterableFactor + $factor;
                }
            }
        }
    }

    @for $i from 1 through list.length($newSelectors) {
        #{list.nth($newSelectors, $i)} {
            @each $key, $values in $newValues {
                #{$key}: list.nth($values, $i);
            }
            
            @each $property, $value in $styles {
                @if not map.has-key($newValues, $property) {
                    #{$property}: $value;
                }
            }
        }
    }
}
