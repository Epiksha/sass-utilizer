@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:selector';
@use '_globals.scss';

@mixin config($utilities, $config) {
    // Setup global config
    @each $setting, $value in $config {
        @include globals.set(config, $setting, $value);
    }

    // Setup utilities' config
    @if $utilities {
        @each $selector, $settings in $utilities {
            $newSelector: $selector;

            // Add aliases to $newSelector
            @if map.get($settings, aliases) {
                @each $alias in map.get($settings, aliases) {
                    $newSelector: string.insert($newSelector, ', #{$alias}', string.length($newSelector) + 1);
                }
            }

            // Use blueprint config if current utility's setting is null or undefined
            @if map.get($settings, blueprints) {
                @each $blueprint in map.get($settings, blueprints) {
                    @if globals.get(config, blueprints, $blueprint) {
                        @each $blueprintSettingLabel, $blueprintSettingValue in globals.get(config, blueprints, $blueprint) {
                            @if map.get($settings, $blueprintSettingLabel) == null {
                                $settings: map.set($settings, $blueprintSettingLabel, $blueprintSettingValue);
                            } @else if $blueprintSettingLabel == styles {
                                @each $property, $value in $blueprintSettingValue {
                                    @if map.get($settings, styles, $property) == null {
                                        $settings: map.set($settings, styles, $property, $value);
                                    }
                                }
                            }
                        }
                    } @else {
                        @warn 'utility #{$selector} has a blueprint that is not defined in global config';
                    }
                }
            }

            // Add global config to utility's config if not already declared
            @each $globalConfigLabel, $globalConfigSettings in globals.get(config, defaults) {
                @if map.get($settings, $globalConfigLabel) == null {
                    @if $globalConfigLabel == breakpoints or $globalConfigLabel == increments or $globalConfigLabel == directions or $globalConfigLabel == pseudos or $globalConfigLabel == dives {
                        $settings: map.set($settings, $globalConfigLabel, $globalConfigSettings);
                    } @else if ($globalConfigLabel == styles) {
                        @each $property, $value in $globalConfigSettings {
                            @if map.get($settings, styles, $property) == null {
                                $settings: map.set($settings, styles, $property, $value);
                            }
                        }
                    }
                }
            }

            // Remove unneeded config properties from utility
            @each $setting in (aliases, blueprints) {
                $settings: map.remove($settings, $setting);
            }
            
            // Add as a basic global utility
            @if globals.get(utilities, basic) == null {
                @include globals.set(utilities, basic, ($newSelector: $settings));
            } @else {
                @include globals.merge(utilities, basic, ($newSelector: $settings));
            }
        }
    } @else {
        @warn 'Sass Utilizer: No utilities passed into utilizer';
    }
}
