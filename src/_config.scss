@use 'sass:map';
@use 'sass:list';
@use '_globals.scss';

@function get($keys...) {
    @if length($keys) {
        @return globals.get(config, $keys...);
    } @else {
        @return globals.get(config);
    }
}

// Set config (located in globals file)
@mixin _set($setting, $value, $isGlobal: false) {
    $mapKeys: config, utility;
    $type: utility;

    @if $isGlobal {
        $mapKeys: config, global;
        $type: global;
    }

    $keys: list.join($mapKeys, ($setting, $value));

    // Check if config property is valid and if so, set it to current setting
    @if map.has-key(globals.get($mapKeys...), $setting) {
        $configProperty: globals.get(list.join($mapKeys, $setting)...);

        @if $configProperty {
            @each $tempKey, $tempValue in $configProperty {
                @if $tempValue != null and $tempValue != $value {
                    $newMap: $value;

                    // Remove any property that might overwrite an existing property
                    @each $key in map-keys($value) {
                        @if map.has-key($newMap, $tempKey) {
                            $newMap: map.remove($newMap, $key);
                        }
                    }

                    @include globals.merge(list.join($mapKeys, ($setting, $newMap))...);
                }
            }
        } @else {
            @include globals.set($keys...);
        }
    } @else {
        @error 'Sass Utilizer: Invalid setting in #{$type} config SET method: #{$setting}';
    }

    // Use defaults from global if utility's config property equals null
    @each $configLabel, $configValue in globals.get(config, global, defaults) {
        @if globals.get(config, utility, $configLabel) == null {
            @include globals.set(config, utility, $configLabel, $configValue);
        }
    }
}

@mixin setup($utilities, $config) {
    // Setup global config
    @each $setting, $value in $config {
        @include _set($setting, $value, true);
    }
    
    // Setup utility-specific config
    @if $utilities {
        @each $utilityLabel, $utility in $utilities {
            $labels: ($utilityLabel,);

            // Build out config
            @each $setting, $value in $utility {
                @if $setting == aliases {
                    @each $alias in $value {
                        $labels: list.append($labels, $alias);
                    }
                } @else {
                    @include _set($setting, $value);
                }
            }

            // Setup groups
            @if globals.get(config, utility, groups) {
                @each $group in globals.get(config, utility, groups) {
                    @if globals.get(config, global, groups, $group) {
                        @each $setting, $value in globals.get(config, global, groups, $group) {
                            @include _set($setting, $value);
                        } 
                    } @else {
                        @warn 'Sass Utilizer: Group \'#{$group}\' in utility \'#{$utilityLabel}\' is not defined';
                    }
                }
            }

            // Add formatted utility to global utilities (will generate identical utilities for every alias)
            @each $label in $labels {
                @include globals.set(utilities, $label, globals.get(config, utility));
            }

            // Reset global utility-specific config for next utility
            @include globals.resetUtilityConfig();
        }
    } @else {
        @error 'Sass Utilizer: No utilities passed into utilizer';
    }
}
